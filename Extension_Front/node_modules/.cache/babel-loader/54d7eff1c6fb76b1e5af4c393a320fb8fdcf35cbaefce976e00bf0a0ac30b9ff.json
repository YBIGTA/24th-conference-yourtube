{"ast":null,"code":"import{google}from'googleapis';import http from'http';import open from'open';import destroyer from'server-destroy';import{URL}from'url';const credentialsPath='/client_secret.json';const scopes=[\"https://www.googleapis.com/auth/youtube\",\"https://www.googleapis.com/auth/youtube.force-ssl\",\"https://www.googleapis.com/auth/youtube.readonly\",\"https://www.googleapis.com/auth/youtubepartner\"];let oauth2Client=null;async function getAuthenticate(){if(!oauth2Client){const response=await fetch(credentialsPath);const credentials=await response.json();oauth2Client=new google.auth.OAuth2(credentials.web.client_id,credentials.web.client_secret,credentials.web.redirect_uris[0]);}return new Promise((resolve,reject)=>{if(oauth2Client.credentials&&oauth2Client.credentials.refresh_token){oauth2Client.getAccessToken((err,token)=>{if(err){reject(err);}resolve(oauth2Client);});}else{const authorizeUrl=oauth2Client.generateAuthUrl({access_type:\"offline\",scope:scopes});const server=http.createServer(async(req,res)=>{try{if(req.url.indexOf(\"/api/oauth2callback\")>-1){const qs=new URL(req.url,credentials.web.javascript_origins[0]).searchParams;res.end(\"<h1>Authentication successful! You can close this window and return to the console.</h1>\");server.destroy();const{tokens}=await oauth2Client.getToken(qs.get(\"code\"));oauth2Client.setCredentials(tokens);resolve(oauth2Client);}}catch(e){reject(e);}}).listen(3031,()=>{open(authorizeUrl,{wait:false}).then(cp=>cp.unref());});destroyer(server);}});}export default getAuthenticate;","map":{"version":3,"names":["google","http","open","destroyer","URL","credentialsPath","scopes","oauth2Client","getAuthenticate","response","fetch","credentials","json","auth","OAuth2","web","client_id","client_secret","redirect_uris","Promise","resolve","reject","refresh_token","getAccessToken","err","token","authorizeUrl","generateAuthUrl","access_type","scope","server","createServer","req","res","url","indexOf","qs","javascript_origins","searchParams","end","destroy","tokens","getToken","get","setCredentials","e","listen","wait","then","cp","unref"],"sources":["/Users/davidkim/Desktop/YourTube_Extension/24-1_YourTube/src/youtueb_API/getOauth2Client.js"],"sourcesContent":["import { google } from 'googleapis';\nimport http from 'http';\nimport open from 'open';\nimport destroyer from 'server-destroy';\nimport { URL } from 'url';\n\nconst credentialsPath = '/client_secret.json';\n\nconst scopes = [\n    \"https://www.googleapis.com/auth/youtube\",\n    \"https://www.googleapis.com/auth/youtube.force-ssl\",\n    \"https://www.googleapis.com/auth/youtube.readonly\",\n    \"https://www.googleapis.com/auth/youtubepartner\"\n];\n\nlet oauth2Client = null;\n\nasync function getAuthenticate() {\n    if (!oauth2Client) {\n        const response = await fetch(credentialsPath);\n        const credentials = await response.json();\n\n        oauth2Client = new google.auth.OAuth2(\n            credentials.web.client_id,\n            credentials.web.client_secret,\n            credentials.web.redirect_uris[0]\n        );\n    }\n\n    return new Promise((resolve, reject) => {\n        if (oauth2Client.credentials && oauth2Client.credentials.refresh_token) {\n            oauth2Client.getAccessToken((err, token) => {\n                if (err) {\n                    reject(err);\n                }\n                resolve(oauth2Client);\n            });\n        } else {\n            const authorizeUrl = oauth2Client.generateAuthUrl({\n                access_type: \"offline\",\n                scope: scopes\n            });\n\n            const server = http.createServer(async (req, res) => {\n                try {\n                    if (req.url.indexOf(\"/api/oauth2callback\") > -1) {\n                        const qs = new URL(req.url, credentials.web.javascript_origins[0]).searchParams;\n                        res.end(\"<h1>Authentication successful! You can close this window and return to the console.</h1>\");\n                        server.destroy();\n\n                        const { tokens } = await oauth2Client.getToken(qs.get(\"code\"));\n                        oauth2Client.setCredentials(tokens);\n\n                        resolve(oauth2Client);\n                    }\n                } catch (e) {\n                    reject(e);\n                }\n            }).listen(3031, () => {\n                open(authorizeUrl, { wait: false }).then(cp => cp.unref());\n            });\n            destroyer(server);\n        }\n    });\n}\n\nexport default getAuthenticate;\n"],"mappings":"AAAA,OAASA,MAAM,KAAQ,YAAY,CACnC,MAAO,CAAAC,IAAI,KAAM,MAAM,CACvB,MAAO,CAAAC,IAAI,KAAM,MAAM,CACvB,MAAO,CAAAC,SAAS,KAAM,gBAAgB,CACtC,OAASC,GAAG,KAAQ,KAAK,CAEzB,KAAM,CAAAC,eAAe,CAAG,qBAAqB,CAE7C,KAAM,CAAAC,MAAM,CAAG,CACX,yCAAyC,CACzC,mDAAmD,CACnD,kDAAkD,CAClD,gDAAgD,CACnD,CAED,GAAI,CAAAC,YAAY,CAAG,IAAI,CAEvB,cAAe,CAAAC,eAAeA,CAAA,CAAG,CAC7B,GAAI,CAACD,YAAY,CAAE,CACf,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACL,eAAe,CAAC,CAC7C,KAAM,CAAAM,WAAW,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAEzCL,YAAY,CAAG,GAAI,CAAAP,MAAM,CAACa,IAAI,CAACC,MAAM,CACjCH,WAAW,CAACI,GAAG,CAACC,SAAS,CACzBL,WAAW,CAACI,GAAG,CAACE,aAAa,CAC7BN,WAAW,CAACI,GAAG,CAACG,aAAa,CAAC,CAAC,CACnC,CAAC,CACL,CAEA,MAAO,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACpC,GAAId,YAAY,CAACI,WAAW,EAAIJ,YAAY,CAACI,WAAW,CAACW,aAAa,CAAE,CACpEf,YAAY,CAACgB,cAAc,CAAC,CAACC,GAAG,CAAEC,KAAK,GAAK,CACxC,GAAID,GAAG,CAAE,CACLH,MAAM,CAACG,GAAG,CAAC,CACf,CACAJ,OAAO,CAACb,YAAY,CAAC,CACzB,CAAC,CAAC,CACN,CAAC,IAAM,CACH,KAAM,CAAAmB,YAAY,CAAGnB,YAAY,CAACoB,eAAe,CAAC,CAC9CC,WAAW,CAAE,SAAS,CACtBC,KAAK,CAAEvB,MACX,CAAC,CAAC,CAEF,KAAM,CAAAwB,MAAM,CAAG7B,IAAI,CAAC8B,YAAY,CAAC,MAAOC,GAAG,CAAEC,GAAG,GAAK,CACjD,GAAI,CACA,GAAID,GAAG,CAACE,GAAG,CAACC,OAAO,CAAC,qBAAqB,CAAC,CAAG,CAAC,CAAC,CAAE,CAC7C,KAAM,CAAAC,EAAE,CAAG,GAAI,CAAAhC,GAAG,CAAC4B,GAAG,CAACE,GAAG,CAAEvB,WAAW,CAACI,GAAG,CAACsB,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAACC,YAAY,CAC/EL,GAAG,CAACM,GAAG,CAAC,0FAA0F,CAAC,CACnGT,MAAM,CAACU,OAAO,CAAC,CAAC,CAEhB,KAAM,CAAEC,MAAO,CAAC,CAAG,KAAM,CAAAlC,YAAY,CAACmC,QAAQ,CAACN,EAAE,CAACO,GAAG,CAAC,MAAM,CAAC,CAAC,CAC9DpC,YAAY,CAACqC,cAAc,CAACH,MAAM,CAAC,CAEnCrB,OAAO,CAACb,YAAY,CAAC,CACzB,CACJ,CAAE,MAAOsC,CAAC,CAAE,CACRxB,MAAM,CAACwB,CAAC,CAAC,CACb,CACJ,CAAC,CAAC,CAACC,MAAM,CAAC,IAAI,CAAE,IAAM,CAClB5C,IAAI,CAACwB,YAAY,CAAE,CAAEqB,IAAI,CAAE,KAAM,CAAC,CAAC,CAACC,IAAI,CAACC,EAAE,EAAIA,EAAE,CAACC,KAAK,CAAC,CAAC,CAAC,CAC9D,CAAC,CAAC,CACF/C,SAAS,CAAC2B,MAAM,CAAC,CACrB,CACJ,CAAC,CAAC,CACN,CAEA,cAAe,CAAAtB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}