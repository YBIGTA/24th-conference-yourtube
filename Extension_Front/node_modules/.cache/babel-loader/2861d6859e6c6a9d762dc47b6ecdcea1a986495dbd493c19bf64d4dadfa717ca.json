{"ast":null,"code":"import{google}from'googleapis';import http from'http';import open from'open';import destroyer from'server-destroy';import{URL,fileURLToPath}from'url';import path from'path';let fs;if(typeof window==='undefined'){fs=require('fs');}// API credentials\nconst __dirname=path.dirname(fileURLToPath(import.meta.url));const credentialsPath=path.join(__dirname,'client_secret.json');const credentials=JSON.parse(fs.readFileSync(credentialsPath)).web;const oauth2Client=new google.auth.OAuth2(credentials.client_id,credentials.client_secret,credentials.redirect_uris[0]);// Scopes: 유튜브 API에 대한 권한\nconst scopes=[\"https://www.googleapis.com/auth/youtube\",\"https://www.googleapis.com/auth/youtube.force-ssl\",\"https://www.googleapis.com/auth/youtube.readonly\",\"https://www.googleapis.com/auth/youtubepartner\"];let refreshToken=\"\";async function getAuthenticate(){return new Promise((resolve,reject)=>{if(refreshToken){oauth2Client.setCredentials({refresh_token:refreshToken});oauth2Client.getAccessToken((err,token)=>{if(err){reject(err);}resolve(oauth2Client);});}else{const authorizeUrl=oauth2Client.generateAuthUrl({access_type:\"offline\",scope:scopes});const server=http.createServer(async(req,res)=>{try{if(req.url.indexOf(\"/api/oauth2callback\")>-1){const qs=new URL(req.url,credentials.javascript_origins[0]).searchParams;res.end(\"<h1>Authentication successful! You can close this window and return to the console.</h1>\");server.destroy();const{tokens}=await oauth2Client.getToken(qs.get(\"code\"));refreshToken=tokens.refresh_token;oauth2Client.credentials=tokens;resolve(oauth2Client);}}catch(e){reject(e);}}).listen(3031,()=>{open(authorizeUrl,{wait:false}).then(cp=>cp.unref());});destroyer(server);}});}export default getAuthenticate;","map":{"version":3,"names":["google","http","open","destroyer","URL","fileURLToPath","path","fs","window","require","__dirname","dirname","import","meta","url","credentialsPath","join","credentials","JSON","parse","readFileSync","web","oauth2Client","auth","OAuth2","client_id","client_secret","redirect_uris","scopes","refreshToken","getAuthenticate","Promise","resolve","reject","setCredentials","refresh_token","getAccessToken","err","token","authorizeUrl","generateAuthUrl","access_type","scope","server","createServer","req","res","indexOf","qs","javascript_origins","searchParams","end","destroy","tokens","getToken","get","e","listen","wait","then","cp","unref"],"sources":["/Users/davidkim/Desktop/YourTube_Extension/24-1_YourTube/src/youtueb_API/getOauth2Client.js"],"sourcesContent":["import { google } from 'googleapis';\nimport http from 'http';\nimport open from 'open';\nimport destroyer from 'server-destroy';\nimport { URL, fileURLToPath } from 'url';\nimport path from 'path';\n\nlet fs;\nif (typeof window === 'undefined') {\n  fs = require('fs');\n}\n\n// API credentials\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst credentialsPath = path.join(__dirname, 'client_secret.json');\nconst credentials = JSON.parse(fs.readFileSync(credentialsPath)).web;\nconst oauth2Client = new google.auth.OAuth2(\n  credentials.client_id,\n  credentials.client_secret,\n  credentials.redirect_uris[0]\n);\n\n// Scopes: 유튜브 API에 대한 권한\nconst scopes = [\n  \"https://www.googleapis.com/auth/youtube\",\n  \"https://www.googleapis.com/auth/youtube.force-ssl\",\n  \"https://www.googleapis.com/auth/youtube.readonly\",\n  \"https://www.googleapis.com/auth/youtubepartner\"\n];\n\nlet refreshToken = \"\";\n\nasync function getAuthenticate() {\n  return new Promise((resolve, reject) => {\n    if (refreshToken) {\n      oauth2Client.setCredentials({\n        refresh_token: refreshToken\n      });\n\n      oauth2Client.getAccessToken((err, token) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(oauth2Client);\n      });\n    } else {\n      const authorizeUrl = oauth2Client.generateAuthUrl({\n        access_type: \"offline\",\n        scope: scopes\n      });\n\n      const server = http.createServer(async (req, res) => {\n        try {\n          if (req.url.indexOf(\"/api/oauth2callback\") > -1) {\n            const qs = new URL(req.url, credentials.javascript_origins[0]).searchParams;\n            res.end(\"<h1>Authentication successful! You can close this window and return to the console.</h1>\");\n            server.destroy();\n\n            const { tokens } = await oauth2Client.getToken(qs.get(\"code\"));\n            refreshToken = tokens.refresh_token;\n            oauth2Client.credentials = tokens;\n\n            resolve(oauth2Client);\n          }\n        } catch (e) {\n          reject(e);\n        }\n      }).listen(3031, () => {\n        open(authorizeUrl, { wait: false }).then(cp => cp.unref());\n      });\n      destroyer(server);\n    }\n  });\n}\n\nexport default getAuthenticate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}