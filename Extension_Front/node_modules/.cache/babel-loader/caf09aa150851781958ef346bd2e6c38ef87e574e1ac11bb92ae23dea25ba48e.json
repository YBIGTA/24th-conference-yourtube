{"ast":null,"code":"// authenticate.mjs\nimport{google}from'googleapis';import http from'http';import open from'open';import destroyer from'server-destroy';import url from'url';import fs from'fs';import path from'path';import{fileURLToPath}from'url';// API credentials\nconst __dirname=path.dirname(fileURLToPath(import.meta.url));const credentialsPath=path.join(__dirname,'client_secret.json');const credentials=JSON.parse(fs.readFileSync(credentialsPath)).web;const oauth2Client=new google.auth.OAuth2(credentials.client_id,credentials.client_secret,credentials.redirect_uris[0]);// Scopes: 유튜브 API에 대한 권한\nconst scopes=[\"https://www.googleapis.com/auth/youtube\",\"https://www.googleapis.com/auth/youtube.force-ssl\",\"https://www.googleapis.com/auth/youtube.readonly\",\"https://www.googleapis.com/auth/youtubepartner\"];let refreshToken=\"\";async function getAuthenticate(){return new Promise((resolve,reject)=>{if(refreshToken){oauth2Client.setCredentials({refresh_token:refreshToken});oauth2Client.getAccessToken((err,token)=>{if(err){reject(err);}resolve(oauth2Client);});}else{const authorizeUrl=oauth2Client.generateAuthUrl({access_type:\"offline\",scope:scopes});const server=http.createServer(async(req,res)=>{try{if(req.url.indexOf(\"/api/oauth2callback\")>-1){const qs=new url.URL(req.url,credentials.javascript_origins[0]).searchParams;res.end(\"<h1>Authentication successful! You can close this window and return to the console.</h1>\");server.destroy();const{tokens}=await oauth2Client.getToken(qs.get(\"code\"));refreshToken=tokens.refresh_token;oauth2Client.credentials=tokens;resolve(oauth2Client);}}catch(e){reject(e);}}).listen(3031,()=>{open(authorizeUrl,{wait:false}).then(cp=>cp.unref());});destroyer(server);}});}export default getAuthenticate;","map":{"version":3,"names":["google","http","open","destroyer","url","fs","path","fileURLToPath","__dirname","dirname","import","meta","credentialsPath","join","credentials","JSON","parse","readFileSync","web","oauth2Client","auth","OAuth2","client_id","client_secret","redirect_uris","scopes","refreshToken","getAuthenticate","Promise","resolve","reject","setCredentials","refresh_token","getAccessToken","err","token","authorizeUrl","generateAuthUrl","access_type","scope","server","createServer","req","res","indexOf","qs","URL","javascript_origins","searchParams","end","destroy","tokens","getToken","get","e","listen","wait","then","cp","unref"],"sources":["/Users/davidkim/Desktop/YourTube_Extension/24-1_YourTube/src/youtueb_API/getOauth2Client.js"],"sourcesContent":["// authenticate.mjs\nimport { google } from 'googleapis';\nimport http from 'http';\nimport open from 'open';\nimport destroyer from 'server-destroy';\nimport url from 'url';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// API credentials\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst credentialsPath = path.join(__dirname, 'client_secret.json');\nconst credentials = JSON.parse(fs.readFileSync(credentialsPath)).web;\nconst oauth2Client = new google.auth.OAuth2(\n    credentials.client_id,\n    credentials.client_secret,\n    credentials.redirect_uris[0]\n);\n\n// Scopes: 유튜브 API에 대한 권한\nconst scopes = [\n    \"https://www.googleapis.com/auth/youtube\",\n    \"https://www.googleapis.com/auth/youtube.force-ssl\",\n    \"https://www.googleapis.com/auth/youtube.readonly\",\n    \"https://www.googleapis.com/auth/youtubepartner\"\n];\n\nlet refreshToken = \"\";\n\nasync function getAuthenticate() {\n    return new Promise((resolve, reject) => {\n        if (refreshToken) {\n            oauth2Client.setCredentials({\n                refresh_token: refreshToken\n            });\n\n            oauth2Client.getAccessToken((err, token) => {\n                if (err) {\n                    reject(err);\n                }\n                resolve(oauth2Client);\n            });\n        } else {\n            const authorizeUrl = oauth2Client.generateAuthUrl({\n                access_type: \"offline\",\n                scope: scopes\n            });\n\n            const server = http.createServer(async (req, res) => {\n                try {\n                    if (req.url.indexOf(\"/api/oauth2callback\") > -1) {\n                        const qs = new url.URL(req.url, credentials.javascript_origins[0]).searchParams;\n                        res.end(\"<h1>Authentication successful! You can close this window and return to the console.</h1>\");\n                        server.destroy();\n\n                        const { tokens } = await oauth2Client.getToken(qs.get(\"code\"));\n                        refreshToken = tokens.refresh_token;\n                        oauth2Client.credentials = tokens;\n\n                        resolve(oauth2Client);\n                    }\n                } catch (e) {\n                    reject(e);\n                }\n            }).listen(3031, () => {\n                open(authorizeUrl, { wait: false }).then(cp => cp.unref());\n            });\n            destroyer(server);\n        }\n    });\n}\n\nexport default getAuthenticate;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}